# vim: filetype=bash

#### arg handling functions
argStripLast()
{
    ## when run on a list of args, remove the last arg

    echo "${@:1:$#-1}"
}

argGetLast()
{
    ## when run on a list of args, return only the last arg
    echo "${@:$#:1}"
}

#### general functions
:only()
{
    ## close all iterm2 windows except for current

    PROG='!'"/^$$|ack/&&/$(basename $SHELL)"'$/{print$2}'
    ps -ao pid,ppid,comm= | awk "$PROG" | xargs kill
}

abspath()
{
    ## assuming argument is a valid relative path, returns equivalent absolute path
    ## `ls -d` is to check if return value is valid path
    dirstr=$(cd $(dirname "$1") && pwd -P)
    basestr=$(basename "$1")
    echo $(ls -d "${dirstr}"/"${basestr}")

    #echo $(ls -d $(cd $(dirname "$1") && pwd -P)/$(basename "$1"))
}

beginswith() 
{ 
    ## posix compliant check for <str begins with substr>.
    ## Use in constructs like `if beginswith substr str; then`
    
    substr="$1"
    str=$2

    case $str in $substr*) true;; *) false;; esac;
}

cdtap()
{
    # cd to root repository directory of a homebrew tap
    cd $(brew --repository $1)
}

dolog()
{
    ## Use: dologall <path-to-logfile> <one-or-more-arbitrary-cmds>
    ## Copies stdout to logfile while still outputting normally.
    ## If color codes are present, they are left in the stdout while being stripped from the logfile.

    # store the first arg and then shift it away
    LOGFILE=$1
    shift

    # the first arg is used as the full path to the logfile, while the rest of the args are run
    unbuffer "${@}" | tee >(stripColor > "${LOGFILE}")

    # old version in which the logfile path argument had to be passed in last
    #unbuffer $(argStripLast "${@}") | tee >(stripColor > "${@: -1}")
}

dologall()
{
    ## same as dolog(), except color escape codes (if presnt) are retained in the logfile

    # store the first arg and then shift it away
    LOGFILE=$1
    shift

    # the first arg is used as the full path to the logfile, while the rest of the args are run
    unbuffer "${@}" | tee "${LOGFILE}"
}

__exists()
{
    if [ $1 $2 ]; then
        echo $2
    fi
}

_exists()
{
    if [ "$#" -gt 1 ]; then
        for f in ${@:2}; do
            __exists ${@:1:1} $f
        done
    else
        while read f; do
            __exists ${@:1:1} $f
        done
    fi
}

exists()
{
    _exists -a $@
}

existsDir()
{
    _exists -d $@
}

existsFile()
{
    _exists -f $@
}

findDirsContaining()
{
    ## Find all dirs in $1 containing files or dirs named $2.
    ## Case sensitive.

    find $1 -name $2 -exec dirname {} ';'
}

hist()
{
    ## Find all matches (using grep) to a regex in ${HOME}/.bash_history.
    ## If only x matches are desired, use as `hist -m x <regex-pattern>`.
    
    grep "${@}" "${HOME}/.bash_history"
}

histtail()
{
    ## Finds the last m (default=25) matches to a regex in ${HOME}/.bash_history.
    ## The results are then sorted according to the order they occur in .bash_history (ie newest line last, instead of in reverse order).

    print_usage() {
        printf "%s\n" "Usage: histtail [-m <lines, default=25>] <args-for-grep>" "" "Get the last m (default=25) matches to a regex in ${HOME}/.bash_history." "The results are sorted according to the order they occur in .bash_history (ie newest line last, instead of in reverse order)."
    }

    POSITIONAL=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                print_usage
                return 0 ;;
            *)    # unknown option
                POSITIONAL+=("$1") # save it in an array for later
                shift ;; # past argument
        esac
    done
    set -- "${POSITIONAL[@]}" # restore positional parameters

    greplast "${@}" "${HOME}/.bash_history"
}

gitfixmodtime()
{
    ## Syncs the mod time of a list of files in a git repo to correspond with the last git revision time.
    ## Kind of a rusty scalpel, in truth.

    local f
    for f; do
        touch -d @0`git log --pretty=%at -n1 -- "$f"` "$f"
    done
}

gitrestore()
{
    ## Restore the most recent version of a deleted file/dir in a git repository

    file=$1
    latestrev=$(git rev-list -n 1 HEAD -- "${file}" 2>&1)
    
    if beginswith fatal $latestrev; then
        >&2 echo "${latestrev}"
    elif [ -n "${latestrev}" ]; then
        echo "Found ${file} at ${latestrev} (most recent revision), restoring..."
        git checkout "${latestrev}^" -- "${file}"
        echo "done"
    else
        echo "Did not find ${file} at any revision in this repository"
    fi
}

greplast()
{
    ## Get the last m (default=25) matches to a regex in a file.

    lines=25

    # test if `gtac` is available, and print helpful note if not
    command -v gtac >/dev/null 2>&1 || { printf >&2 "%s\n" "\`greplast\` requires the \`gtac\` cmd. Aborting." "(Note: on Mac, \`gtac\` can be obtained by running \`brew install coreutils\`.)"; return 1; }

    print_usage() {
        printf "%s\n" "Usage: greplast [-m <lines, default=25>] <args-for-grep>" "" "Get the last m (default=25) matches to a regex in a file." "Same syntax as \`grep\`, but unlike \`grep\` this function works well with very large files." "The results are sorted according to the order they occur in the file (ie newest line last, instead of in reverse order)."
    }

    POSITIONAL=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                print_usage
                return 0 ;;
            *)    # unknown option
                POSITIONAL+=("$1") # save it in an array for later
                shift ;; # past argument
        esac
    done
    set -- "${POSITIONAL[@]}" # restore positional parameters

    gtac "${@:$#:1}" | grep -m "${lines}" "${@:1:$#-1}" | nl | sort -nr | cut -f 2-

    # tail version is completely osx native, but will only search a fixed number of lines, so it may stop before m matches are found
    #tail -r -n 1000 ${@:$#:1} | grep -m "{lines}" ${@:1:$#-1} | nl | sort -nr | cut -f 2-
}

removeFilesInList()
{
    ## Removes all of the files in a passed in list, including empty dirs.

    for f in $(cat $1) ; do
        rm -r "$f"
    done
}

stripColor()
{
    ## Strips the bash color escapes from anything piped to this function.
    ## Assumes the escapes begin with \x1B, which just so happens to be the standard `esc` char.

    sed -E $'s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g'
}

title() {
    ## Sets the title of the current terminal

    echo -ne "\033]0;"$*"\007"
}

#######################
#### notes on bash ####
#######################

#### loop over newline-separated list:
# for x in $LIST; do
#     ...
# done

#### loop over passed/piped in newline-separated list:
# for x in $@; do
#     ...
# done

#### loop over the lines of a file called "file.txt":
# while read x; do
#     ...
# done < file.txt

#### loop over space-separated list:
# for x in ${LIST[@]}; do
#     ...
# done

