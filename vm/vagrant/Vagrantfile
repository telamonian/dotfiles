# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
    # The most common configuration options are documented and commented below.
    # For a complete reference, please see the online documentation at
    # https://docs.vagrantup.com.
    
    config.vm.define "xenial" do |xenial|
        # Every Vagrant development environment requires a box. You can search for
        # boxes at https://vagrantcloud.com/search.
        xenial.vm.box = "ubuntu/xenial64"
  
        # Disable automatic box update checking. If you disable this, then
        # boxes will only be checked for updates when the user runs
        # `vagrant box outdated`. This is not recommended.
        xenial.vm.box_check_update = false
  
        # Create a forwarded port mapping which allows access to a specific port
        # within the machine from a port on the host machine. In the example below,
        # accessing "localhost:8080" will access port 80 on the guest machine.
        # NOTE: This will enable public access to the opened port
        # xenial.vm.network "forwarded_port", guest: 80, host: 8080
  
        # Create a forwarded port mapping which allows access to a specific port
        # within the machine from a port on the host machine and only allow access
        # via 127.0.0.1 to disable public access
        xenial.vm.network "forwarded_port", guest: 22, host: 10022, host_ip: "127.0.0.1"
  
        # Create a private network, which allows host-only access to the machine
        # using a specific IP.
        # xenial.vm.network "private_network", ip: "192.168.33.10"
  
        # Create a public network, which generally matched to bridged network.
        # Bridged networks make the machine appear as another physical device on
        # your network.
        # xenial.vm.network "public_network"
  
        # Share an additional folder to the guest VM. The first argument is
        # the path on the host to the actual folder. The second argument is
        # the path on the guest to mount the folder. And the optional third
        # argument is a set of non-required options.
        xenial.vm.synced_folder ENV['HOME'], ENV['HOME']
  
        # Provider-specific configuration so you can fine-tune various
        # backing providers for Vagrant. These expose provider-specific options.
        # Example for VirtualBox:
        #
        xenial.vm.provider "virtualbox" do |vb|
            # Display the VirtualBox GUI when booting the machine
            vb.gui = true
        
            # Customize the amount of memory on the VM:
            vb.memory = "4096"
        end
        #
        # View the documentation for the provider you are using for more
        # information on available options.
  
        # Enable provisioning with a shell script. Additional provisioners such as
        # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
        # documentation for more information about their specific syntax and use.
        xenial.vm.provision "shell", inline: <<-SHELL
            apt-get update

            apt-get install -y -q vim slurm
        SHELL
    end
    
    config.vm.define "linuxbrew" do |linuxbrew|
        linuxbrew.vm.box = "ubuntu/trusty64"
        linuxbrew.vm.box_check_update = false
        linuxbrew.vm.network "forwarded_port", guest: 22, host: 10023, host_ip: "127.0.0.1"
  
        # share foleder host <=> guest
        linuxbrew.vm.synced_folder ENV['HOME'], ENV['HOME']
  
        linuxbrew.vm.provider "virtualbox" do |vb|
            # Display the VirtualBox GUI when booting the machine
            vb.gui = true
        
            # Customize the amount of memory on the VM:
            vb.memory = "4096"
        end
        
        linuxbrew.vm.provision "shell", inline: <<-SHELL
            apt-get update
            apt-get install -y curl file g++ git make libxml-parser-perl libxml-sax-perl openssh-server ruby2.0 ruby2.0-dev uuid-runtime vim
            ln -sf ruby2.0 /usr/bin/ruby
            ln -sf gem2.0 /usr/bin/gem

            DEBIAN_FRONTEND=noninteractive sudo apt-get autoremove -y --purge libblas-dev libbz2-dev libexpat1-dev libfreetype6-dev libgl1-mesa-dev libgdbm-dev libicu-dev libidn11-dev libjack-dev libjack-jackd2-0 libjack-jackd2-dev libjack0 libjasper-dev libjbig-dev libkrb5-dev liblapack-dev liblzma-dev libncurses5-dev libopenblas-dev libpcre3-dev libpq-dev libtinfo-dev libwebp-dev libwmf-dev libx11-dev libxml2-dev llvm-3.4 mysql-common zlib1g-dev
            
            localedef -i en_US -f UTF-8 en_US.UTF-8
            useradd -m -s /bin/bash linuxbrew
            echo 'linuxbrew ALL=(ALL) NOPASSWD:ALL' >>/etc/sudoers
            
            mkdir /home/linuxbrew/.ssh
            cp ${HOME}/.ssh/authorized_keys /home/linuxbrew/.ssh
            chown -R linuxbrew: /home/linuxbrew/.ssh

            sudo su linuxbrew
            git clone https://github.com/Homebrew/linuxbrew.git /home/linuxbrew/.linuxbrew

            echo 'PATH=/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH' >> /home/linuxbrew/.bashrc
            echo 'SHELL=/bin/bash' >> /home/linuxbrew/.bashrc

            export 'PATH=/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH'
            brew update
            brew tap linuxbrew/xorg
        SHELL

        linuxbrew.ssh.username = "linuxbrew"
    end

end
